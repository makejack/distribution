// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mytime.Distribution.EFCore;

namespace Mytime.Distribution.EFCore.Migrations.Migrations
{
    [DbContext(typeof(AppDatabase))]
    partial class AppDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.AdminAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<int>("CityCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DetailInfo")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceCode")
                        .HasColumnType("int");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("AreaCode");

                    b.HasIndex("CityCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("AdminAddress");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("NickName")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Pwd")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AdminUser");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CityCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CityCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Assets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvailableAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAssets")
                        .HasColumnType("int");

                    b.Property<int>("TotalCommission")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.AssetsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AssetsHistory");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.BankCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("BankNo")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankCard");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.City", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.CommissionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Commission")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SettlementTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("CommissionHistory");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("City")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsRealName")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("NickName")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("OpenId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Province")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("SessionKey")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("UnionId")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("OpenId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<int>("CityCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DetailInfo")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceCode")
                        .HasColumnType("int");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("AreaCode");

                    b.HasIndex("CityCode");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.CustomerRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChildrenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildrenId");

                    b.HasIndex("ParentId");

                    b.ToTable("CustomerRelation");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Detail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BranchDiscount")
                        .HasColumnType("int");

                    b.Property<int>("CityDiscount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasOptions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ThumbnailImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsMedia", b =>
                {
                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("GoodsId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("GoodsMedia");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("GoodsOption");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsOptionCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("OptionId");

                    b.ToTable("GoodsOptionCombination");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsOptionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("GoodsOptionData");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("OptionId");

                    b.ToTable("GoodsOptionValue");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.OrderBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<bool>("IsInvoiced")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("TelePhone")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderBilling");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CourierCompany")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("CourierCompanyCode")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<int?>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int?>("GoodsItemId")
                        .HasColumnType("int");

                    b.Property<string>("GoodsMediaUrl")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int>("GoodsPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsFirstBatchGoods")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RefundAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RefundApplyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefundReason")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<byte>("RefundStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("RefundTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<byte>("ShippingStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("ShippingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("WarrantyDeadline")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActuallyAmount")
                        .HasColumnType("int");

                    b.Property<string>("CancelReason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ExtendParams")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsFistOrder")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderNo")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("PaymentFee")
                        .HasColumnType("int");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("PaymentType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("RefundFee")
                        .HasColumnType("int");

                    b.Property<string>("RefundReason")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("RefundTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int>("TotalFee")
                        .HasColumnType("int");

                    b.Property<int>("WalletAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.PartnerApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("ApplyType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<byte>("PartnerRole")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("ReferralCommissionRatio")
                        .HasColumnType("int");

                    b.Property<int>("RepurchaseCommissionRatio")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PartnerApply");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.PartnerApplyGoods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerApplyId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("PartnerApplyId");

                    b.ToTable("PartnerApplyGoods");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.HasKey("Code");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.RequestResponseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Headers")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Method")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("RequestBody")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("RequestResponseLog");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.ReturnAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DetailInfo")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("ReturnAddress");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CourierCompany")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("CourierCompanyCode")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<byte>("ShippingStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("ShippingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TotalWeight")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.ShipmentOrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentOrderItem");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DetailInfo")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId")
                        .IsUnique();

                    b.ToTable("ShippingAddress");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMsg")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("Message")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("MsgId")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Time")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("SmsLog");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.WithdrawalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("BankNo")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("HandlingFee")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("PartnerTradeNo")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("WithdrawalHistory");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.AdminAddress", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Area", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityCode");

                    b.HasOne("Mytime.Distribution.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Assets", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithOne("Assets")
                        .HasForeignKey("Mytime.Distribution.Domain.Entities.Assets", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.AssetsHistory", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.BankCard", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.City", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.CommissionHistory", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.OrderItem", "OrderItem")
                        .WithOne("CommissionHistory")
                        .HasForeignKey("Mytime.Distribution.Domain.Entities.CommissionHistory", "OrderItemId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.CustomerRelation", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Children")
                        .WithMany("CustomerRelationChildrens")
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Goods", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Goods", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId");

                    b.HasOne("Mytime.Distribution.Domain.Entities.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId");
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsMedia", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Goods", "Goods")
                        .WithMany("GoodsMedias")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsOptionCombination", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Goods", "Goods")
                        .WithMany("OptionCombinations")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.GoodsOption", "Option")
                        .WithMany("GoodsOptionCombinations")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsOptionData", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.GoodsOption", "GoodsOption")
                        .WithMany("GoodsOptionDatas")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.GoodsOptionValue", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Goods", "Goods")
                        .WithMany("OptionValues")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.GoodsOption", "Option")
                        .WithMany("GoodsOptionValues")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.OrderBilling", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Orders", "Orders")
                        .WithOne("OrderBilling")
                        .HasForeignKey("Mytime.Distribution.Domain.Entities.OrderBilling", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Goods", "Goods")
                        .WithMany("OrderItems")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Mytime.Distribution.Domain.Entities.Orders", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Orders", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.PartnerApplyGoods", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.PartnerApply", "PartnerApply")
                        .WithMany("PartnerApplyGoods")
                        .HasForeignKey("PartnerApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.ReturnAddress", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.OrderItem", "OrderItem")
                        .WithOne("ReturnAddress")
                        .HasForeignKey("Mytime.Distribution.Domain.Entities.ReturnAddress", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.ShipmentOrderItem", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany("ShipmentOrderItems")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mytime.Distribution.Domain.Entities.Shipment", "Shipment")
                        .WithMany("ShipmentOrderItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.ShippingAddress", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Shipment", "Shipment")
                        .WithOne("ShippingAddress")
                        .HasForeignKey("Mytime.Distribution.Domain.Entities.ShippingAddress", "ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mytime.Distribution.Domain.Entities.WithdrawalHistory", b =>
                {
                    b.HasOne("Mytime.Distribution.Domain.Entities.Customer", "Customer")
                        .WithMany("WithdrawalHistorys")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
